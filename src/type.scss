// TODO: Look into how other people are handling web fonts in tokens. Can we ship this?
@font-face {
  font-family: "SST-Roman";
  font-style: normal;
  font-weight: 400;
  font-display: fallback;
  src: url("/assets/fonts/SST-Roman/SST-Roman.eot");
  src: url("/assets/fonts/SST-Roman/SST-Roman.woff2") format("woff2"),
    url("/assets/fonts/SST-Roman/SST-Roman.woff") format("woff"),
    url("/assets/fonts/SST-Roman/SST-Roman.ttf") format("truetype"),
    url("/assets/fonts/SST-Roman/SST-Roman.svg#SST-Roman") format("svg"),
    url("/assets/fonts/SST-Roman/SST-Roman.eot?#iefix")
      format("embedded-opentype");
}

@font-face {
  font-family: "SST-Heavy";
  font-style: normal;
  font-weight: 500 900;
  font-display: fallback;
  src: url("/assets/fonts/SST-Heavy/SST-Heavy.eot");
  src: url("/assets/fonts/SST-Heavy/SST-Heavy.woff2") format("woff2"),
    url("/assets/fonts/SST-Heavy/SST-Heavy.woff") format("woff"),
    url("/assets/fonts/SST-Heavy/SST-Heavy.ttf") format("truetype"),
    url("/assets/fonts/SST-Heavy/SST-Heavy.svg#SST-Heavy") format("svg"),
    url("/assets/fonts/SST-Heavy/SST-Heavy.eot?#iefix")
      format("embedded-opentype");
}

$font-family-base-regular: "SST-Roman", sans-serif;
$font-family-base-heavy: "SST-Heavy", sans-serif;
$font-weight-regular: 400;
$font-weight-heavy: 900;

$text-color-primary: $neutral-00;
$text-color-ghost: $neutral-100;

// TODO: ask Catie how we name this and check other peoples tokens for examples
$letter-spacing-x: 0.075rem;

@use "sass:map";

// NOTE: changes to the type class names will need to be done in code and contentful (foundations > typography)

$fs-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
);
$fs-base: (
  null: 1rem,
  lg: 1.125rem,
);
$fs-h1: (
  null: 2.101rem,
  lg: 2.574rem,
);
$fs-h2: (
  null: 1.811rem,
  lg: 2.181rem,
);
$fs-h3: (
  null: 1.561rem,
  lg: 1.848rem,
);
$fs-h4: (
  null: 1.346rem,
  lg: 1.5666rem,
);
$fs-h5: (
  null: 1.16rem,
  lg: 1.328rem,
);
$fs-h6: (
  null: 1rem,
  lg: 1.125rem,
);
$fs-body-assertive: (
  null: 1.16rem,
  lg: 1.328rem,
);
$fs-body-subtle: (
  null: 0.906rem,
);
$fs-small: (
  null: 0.75rem,
);

@mixin font-size($fs-map, $fs-breakpoints: $fs-breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint {
      @if map.has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map.get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    } @else {
      font-size: $fs-font-size;
    }
  }
}

@mixin font-family-base-regular {
  /* stylelint-disable-next-line declaration-property-value-allowed-list */
  font-family: $font-family-base-regular;
  font-weight: $font-weight-regular;
}

@mixin font-family-base-heavy {
  /* stylelint-disable-next-line declaration-property-value-allowed-list */
  font-family: $font-family-base-heavy;
  font-weight: $font-weight-heavy;
}

.bsds-h1,
.bsds-h2,
.bsds-h3,
.bsds-h4,
.bsds-h5,
.bsds-h6 {
  // TODO: Do we cut color?
  color: $text-color-primary;
  @include font-family-base-heavy;
}

// TODO: Can we include line-height in font-size mixin
// If not, should we add variables (name them very carefully e.g. line-height-heading, line-height-display, line-height-default)
.bsds-h1 {
  @include font-size($fs-h1);
  line-height: 1.4;
}

.bsds-h2 {
  @include font-size($fs-h2);
  line-height: 1.4;
}

.bsds-h3 {
  @include font-size($fs-h3);
  line-height: 1.4;
}

.bsds-h4 {
  @include font-size($fs-h4);
  line-height: 1.4;
}

.bsds-h5 {
  @include font-size($fs-h5);
  line-height: 1.5;
}

.bsds-h6 {
  @include font-size($fs-h6);
  line-height: 1.5;
}

.bsds-body-assertive {
  @include font-size($fs-body-assertive);
}

.bsds-body-subtle {
  @include font-size($fs-body-subtle);
}

.bsds-font-size-sm {
  display: block;
  @include font-size($fs-small);
}

.bsds-font-weight-bold,
.bsds-font-weight-heavy {
  @include font-family-base-heavy;
}
